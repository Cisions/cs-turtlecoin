// Copyright (c) 2018, The TurtleCoin Developers
//
// Please see the included LICENSE file for more information.

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sources/TurtleCoin.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TurtleToTurtle.TurtleCoin
{

    /// <summary>Holder for reflection information generated from sources/TurtleCoin.proto</summary>
    public static partial class TurtleCoinReflection
    {

        #region Descriptor
        /// <summary>File descriptor for sources/TurtleCoin.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static TurtleCoinReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Chhzb3VyY2VzL1R1cnRsZUNvaW4ucHJvdG8SGVR1cnRsZVRvVHVydGxlLlR1",
                  "cnRsZUNvaW4i2gEKC1R1cnRsZUJsb2NrEjwKBmhlYWRlchgBIAEoCzIsLlR1",
                  "cnRsZVRvVHVydGxlLlR1cnRsZUNvaW4uVHVydGxlQmxvY2tIZWFkZXISSQoP",
                  "YmFzZVRyYW5zYWN0aW9uGAIgASgLMjAuVHVydGxlVG9UdXJ0bGUuVHVydGxl",
                  "Q29pbi5UdXJ0bGVCYXNlVHJhbnNhY3Rpb24SQgoMdHJhbnNhY3Rpb25zGAMg",
                  "AygLMiwuVHVydGxlVG9UdXJ0bGUuVHVydGxlQ29pbi5UdXJ0bGVUcmFuc2Fj",
                  "dGlvbiJ8ChFUdXJ0bGVCbG9ja0hlYWRlchIUCgxtYWpvclZlcnNpb24YASAB",
                  "KA0SFAoMbWlub3JWZXJzaW9uGAIgASgNEhEKCXRpbWVzdGFtcBgDIAEoBBIZ",
                  "ChFwcmV2aW91c0Jsb2NrSGFzaBgEIAEoCRINCgVub25jZRgFIAEoDSJgChVU",
                  "dXJ0bGVCYXNlVHJhbnNhY3Rpb24SRwoLdHJhbnNhY3Rpb24YASABKAsyMi5U",
                  "dXJ0bGVUb1R1cnRsZS5UdXJ0bGVDb2luLlR1cnRsZVRyYW5zYWN0aW9uUHJl",
                  "Zml4IqYBChFUdXJ0bGVUcmFuc2FjdGlvbhJHCgt0cmFuc2FjdGlvbhgBIAEo",
                  "CzIyLlR1cnRsZVRvVHVydGxlLlR1cnRsZUNvaW4uVHVydGxlVHJhbnNhY3Rp",
                  "b25QcmVmaXgSSAoJc2lnbmF0dXJlGAIgAygLMjUuVHVydGxlVG9UdXJ0bGUu",
                  "VHVydGxlQ29pbi5UdXJ0bGVUcmFuc2FjdGlvblNpZ25hdHVyZSLoAQoXVHVy",
                  "dGxlVHJhbnNhY3Rpb25QcmVmaXgSDwoHdmVyc2lvbhgBIAEoDRISCgp1bmxv",
                  "Y2tUaW1lGAIgASgEEkEKBmlucHV0cxgDIAMoCzIxLlR1cnRsZVRvVHVydGxl",
                  "LlR1cnRsZUNvaW4uVHVydGxlVHJhbnNhY3Rpb25JbnB1dBJDCgdvdXRwdXRz",
                  "GAQgAygLMjIuVHVydGxlVG9UdXJ0bGUuVHVydGxlQ29pbi5UdXJ0bGVUcmFu",
                  "c2FjdGlvbk91dHB1dBIRCglwYXltZW50SWQYBSABKAkSDQoFZXh0cmEYBiAD",
                  "KA0iLwoaVHVydGxlVHJhbnNhY3Rpb25TaWduYXR1cmUSEQoJc2lnbmF0dXJl",
                  "GAEgASgJIqsBChZUdXJ0bGVUcmFuc2FjdGlvbklucHV0EkMKA2dlbhgBIAEo",
                  "CzI0LlR1cnRsZVRvVHVydGxlLlR1cnRsZUNvaW4uVHVydGxlVHJhbnNhY3Rp",
                  "b25JbnB1dEdlbkgAEkMKA2tleRgCIAEoCzI0LlR1cnRsZVRvVHVydGxlLlR1",
                  "cnRsZUNvaW4uVHVydGxlVHJhbnNhY3Rpb25JbnB1dEtleUgAQgcKBWlucHV0",
                  "IjkKGVR1cnRsZVRyYW5zYWN0aW9uSW5wdXRHZW4SDAoEdHlwZRgBIAEoBRIO",
                  "CgZoZWlnaHQYAiABKAQiXAoZVHVydGxlVHJhbnNhY3Rpb25JbnB1dEtleRIM",
                  "CgR0eXBlGAEgASgFEg4KBmFtb3VudBgCIAEoBBIPCgdvZmZzZXRzGAMgAygN",
                  "EhAKCGtleUltYWdlGAQgASgJIjoKHVR1cnRsZVRyYW5zYWN0aW9uT3V0cHV0",
                  "VGFyZ2V0EgwKBHR5cGUYASABKA0SCwoDa2V5GAIgASgJInMKF1R1cnRsZVRy",
                  "YW5zYWN0aW9uT3V0cHV0Eg4KBmFtb3VudBgBIAEoBBJICgZ0YXJnZXQYAiAB",
                  "KAsyOC5UdXJ0bGVUb1R1cnRsZS5UdXJ0bGVDb2luLlR1cnRsZVRyYW5zYWN0",
                  "aW9uT3V0cHV0VGFyZ2V0YgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleBlock), global::TurtleToTurtle.TurtleCoin.TurtleBlock.Parser, new[]{ "Header", "BaseTransaction", "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader), global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader.Parser, new[]{ "MajorVersion", "MinorVersion", "Timestamp", "PreviousBlockHash", "Nonce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction), global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction.Parser, new[]{ "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransaction), global::TurtleToTurtle.TurtleCoin.TurtleTransaction.Parser, new[]{ "Transaction", "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix), global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix.Parser, new[]{ "Version", "UnlockTime", "Inputs", "Outputs", "PaymentId", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature), global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature.Parser, new[]{ "Signature" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput), global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput.Parser, new[]{ "Gen", "Key" }, new[]{ "Input" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen), global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen.Parser, new[]{ "Type", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey), global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey.Parser, new[]{ "Type", "Amount", "Offsets", "KeyImage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget), global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget.Parser, new[]{ "Type", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput), global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput.Parser, new[]{ "Amount", "Target" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class TurtleBlock : pb::IMessage<TurtleBlock>
    {
        private static readonly pb::MessageParser<TurtleBlock> _parser = new pb::MessageParser<TurtleBlock>(() => new TurtleBlock());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleBlock> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlock()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlock(TurtleBlock other) : this()
        {
            header_ = other.header_ != null ? other.header_.Clone() : null;
            baseTransaction_ = other.baseTransaction_ != null ? other.baseTransaction_.Clone() : null;
            transactions_ = other.transactions_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlock Clone()
        {
            return new TurtleBlock(this);
        }

        /// <summary>Field number for the "header" field.</summary>
        public const int HeaderFieldNumber = 1;
        private global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader header_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader Header
        {
            get { return header_; }
            set
            {
                header_ = value;
            }
        }

        /// <summary>Field number for the "baseTransaction" field.</summary>
        public const int BaseTransactionFieldNumber = 2;
        private global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction baseTransaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction BaseTransaction
        {
            get { return baseTransaction_; }
            set
            {
                baseTransaction_ = value;
            }
        }

        /// <summary>Field number for the "transactions" field.</summary>
        public const int TransactionsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::TurtleToTurtle.TurtleCoin.TurtleTransaction> _repeated_transactions_codec
            = pb::FieldCodec.ForMessage(26, global::TurtleToTurtle.TurtleCoin.TurtleTransaction.Parser);
        private readonly pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransaction> transactions_ = new pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransaction>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransaction> Transactions
        {
            get { return transactions_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleBlock);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleBlock other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Header, other.Header)) return false;
            if (!object.Equals(BaseTransaction, other.BaseTransaction)) return false;
            if (!transactions_.Equals(other.transactions_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (header_ != null) hash ^= Header.GetHashCode();
            if (baseTransaction_ != null) hash ^= BaseTransaction.GetHashCode();
            hash ^= transactions_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (header_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Header);
            }
            if (baseTransaction_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(BaseTransaction);
            }
            transactions_.WriteTo(output, _repeated_transactions_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (header_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
            }
            if (baseTransaction_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseTransaction);
            }
            size += transactions_.CalculateSize(_repeated_transactions_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleBlock other)
        {
            if (other == null)
            {
                return;
            }
            if (other.header_ != null)
            {
                if (header_ == null)
                {
                    header_ = new global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader();
                }
                Header.MergeFrom(other.Header);
            }
            if (other.baseTransaction_ != null)
            {
                if (baseTransaction_ == null)
                {
                    baseTransaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction();
                }
                BaseTransaction.MergeFrom(other.BaseTransaction);
            }
            transactions_.Add(other.transactions_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (header_ == null)
                            {
                                header_ = new global::TurtleToTurtle.TurtleCoin.TurtleBlockHeader();
                            }
                            input.ReadMessage(header_);
                            break;
                        }
                    case 18:
                        {
                            if (baseTransaction_ == null)
                            {
                                baseTransaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleBaseTransaction();
                            }
                            input.ReadMessage(baseTransaction_);
                            break;
                        }
                    case 26:
                        {
                            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleBlockHeader : pb::IMessage<TurtleBlockHeader>
    {
        private static readonly pb::MessageParser<TurtleBlockHeader> _parser = new pb::MessageParser<TurtleBlockHeader>(() => new TurtleBlockHeader());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleBlockHeader> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlockHeader()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlockHeader(TurtleBlockHeader other) : this()
        {
            majorVersion_ = other.majorVersion_;
            minorVersion_ = other.minorVersion_;
            timestamp_ = other.timestamp_;
            previousBlockHash_ = other.previousBlockHash_;
            nonce_ = other.nonce_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBlockHeader Clone()
        {
            return new TurtleBlockHeader(this);
        }

        /// <summary>Field number for the "majorVersion" field.</summary>
        public const int MajorVersionFieldNumber = 1;
        private uint majorVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MajorVersion
        {
            get { return majorVersion_; }
            set
            {
                majorVersion_ = value;
            }
        }

        /// <summary>Field number for the "minorVersion" field.</summary>
        public const int MinorVersionFieldNumber = 2;
        private uint minorVersion_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MinorVersion
        {
            get { return minorVersion_; }
            set
            {
                minorVersion_ = value;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 3;
        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "previousBlockHash" field.</summary>
        public const int PreviousBlockHashFieldNumber = 4;
        private string previousBlockHash_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PreviousBlockHash
        {
            get { return previousBlockHash_; }
            set
            {
                previousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "nonce" field.</summary>
        public const int NonceFieldNumber = 5;
        private uint nonce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Nonce
        {
            get { return nonce_; }
            set
            {
                nonce_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleBlockHeader);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleBlockHeader other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MajorVersion != other.MajorVersion) return false;
            if (MinorVersion != other.MinorVersion) return false;
            if (Timestamp != other.Timestamp) return false;
            if (PreviousBlockHash != other.PreviousBlockHash) return false;
            if (Nonce != other.Nonce) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MajorVersion != 0) hash ^= MajorVersion.GetHashCode();
            if (MinorVersion != 0) hash ^= MinorVersion.GetHashCode();
            if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
            if (PreviousBlockHash.Length != 0) hash ^= PreviousBlockHash.GetHashCode();
            if (Nonce != 0) hash ^= Nonce.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MajorVersion != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(MajorVersion);
            }
            if (MinorVersion != 0)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(MinorVersion);
            }
            if (Timestamp != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(Timestamp);
            }
            if (PreviousBlockHash.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(PreviousBlockHash);
            }
            if (Nonce != 0)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(Nonce);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MajorVersion != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MajorVersion);
            }
            if (MinorVersion != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinorVersion);
            }
            if (Timestamp != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
            }
            if (PreviousBlockHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousBlockHash);
            }
            if (Nonce != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Nonce);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleBlockHeader other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MajorVersion != 0)
            {
                MajorVersion = other.MajorVersion;
            }
            if (other.MinorVersion != 0)
            {
                MinorVersion = other.MinorVersion;
            }
            if (other.Timestamp != 0UL)
            {
                Timestamp = other.Timestamp;
            }
            if (other.PreviousBlockHash.Length != 0)
            {
                PreviousBlockHash = other.PreviousBlockHash;
            }
            if (other.Nonce != 0)
            {
                Nonce = other.Nonce;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            MajorVersion = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            MinorVersion = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            Timestamp = input.ReadUInt64();
                            break;
                        }
                    case 34:
                        {
                            PreviousBlockHash = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            Nonce = input.ReadUInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleBaseTransaction : pb::IMessage<TurtleBaseTransaction>
    {
        private static readonly pb::MessageParser<TurtleBaseTransaction> _parser = new pb::MessageParser<TurtleBaseTransaction>(() => new TurtleBaseTransaction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleBaseTransaction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBaseTransaction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBaseTransaction(TurtleBaseTransaction other) : this()
        {
            transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleBaseTransaction Clone()
        {
            return new TurtleBaseTransaction(this);
        }

        /// <summary>Field number for the "transaction" field.</summary>
        public const int TransactionFieldNumber = 1;
        private global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix transaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix Transaction
        {
            get { return transaction_; }
            set
            {
                transaction_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleBaseTransaction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleBaseTransaction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Transaction, other.Transaction)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (transaction_ != null) hash ^= Transaction.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (transaction_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Transaction);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (transaction_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleBaseTransaction other)
        {
            if (other == null)
            {
                return;
            }
            if (other.transaction_ != null)
            {
                if (transaction_ == null)
                {
                    transaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix();
                }
                Transaction.MergeFrom(other.Transaction);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (transaction_ == null)
                            {
                                transaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix();
                            }
                            input.ReadMessage(transaction_);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransaction : pb::IMessage<TurtleTransaction>
    {
        private static readonly pb::MessageParser<TurtleTransaction> _parser = new pb::MessageParser<TurtleTransaction>(() => new TurtleTransaction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransaction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransaction()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransaction(TurtleTransaction other) : this()
        {
            transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
            signature_ = other.signature_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransaction Clone()
        {
            return new TurtleTransaction(this);
        }

        /// <summary>Field number for the "transaction" field.</summary>
        public const int TransactionFieldNumber = 1;
        private global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix transaction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix Transaction
        {
            get { return transaction_; }
            set
            {
                transaction_ = value;
            }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 2;
        private static readonly pb::FieldCodec<global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature> _repeated_signature_codec
            = pb::FieldCodec.ForMessage(18, global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature.Parser);
        private readonly pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature> signature_ = new pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionSignature> Signature
        {
            get { return signature_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransaction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransaction other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Transaction, other.Transaction)) return false;
            if (!signature_.Equals(other.signature_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (transaction_ != null) hash ^= Transaction.GetHashCode();
            hash ^= signature_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (transaction_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Transaction);
            }
            signature_.WriteTo(output, _repeated_signature_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (transaction_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
            }
            size += signature_.CalculateSize(_repeated_signature_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransaction other)
        {
            if (other == null)
            {
                return;
            }
            if (other.transaction_ != null)
            {
                if (transaction_ == null)
                {
                    transaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix();
                }
                Transaction.MergeFrom(other.Transaction);
            }
            signature_.Add(other.signature_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (transaction_ == null)
                            {
                                transaction_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionPrefix();
                            }
                            input.ReadMessage(transaction_);
                            break;
                        }
                    case 18:
                        {
                            signature_.AddEntriesFrom(input, _repeated_signature_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionPrefix : pb::IMessage<TurtleTransactionPrefix>
    {
        private static readonly pb::MessageParser<TurtleTransactionPrefix> _parser = new pb::MessageParser<TurtleTransactionPrefix>(() => new TurtleTransactionPrefix());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionPrefix> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionPrefix()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionPrefix(TurtleTransactionPrefix other) : this()
        {
            version_ = other.version_;
            unlockTime_ = other.unlockTime_;
            inputs_ = other.inputs_.Clone();
            outputs_ = other.outputs_.Clone();
            paymentId_ = other.paymentId_;
            extra_ = other.extra_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionPrefix Clone()
        {
            return new TurtleTransactionPrefix(this);
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 1;
        private uint version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Version
        {
            get { return version_; }
            set
            {
                version_ = value;
            }
        }

        /// <summary>Field number for the "unlockTime" field.</summary>
        public const int UnlockTimeFieldNumber = 2;
        private ulong unlockTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong UnlockTime
        {
            get { return unlockTime_; }
            set
            {
                unlockTime_ = value;
            }
        }

        /// <summary>Field number for the "inputs" field.</summary>
        public const int InputsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput> _repeated_inputs_codec
            = pb::FieldCodec.ForMessage(26, global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput.Parser);
        private readonly pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput> inputs_ = new pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionInput> Inputs
        {
            get { return inputs_; }
        }

        /// <summary>Field number for the "outputs" field.</summary>
        public const int OutputsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput> _repeated_outputs_codec
            = pb::FieldCodec.ForMessage(34, global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput.Parser);
        private readonly pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput> outputs_ = new pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutput> Outputs
        {
            get { return outputs_; }
        }

        /// <summary>Field number for the "paymentId" field.</summary>
        public const int PaymentIdFieldNumber = 5;
        private string paymentId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PaymentId
        {
            get { return paymentId_; }
            set
            {
                paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "extra" field.</summary>
        public const int ExtraFieldNumber = 6;
        private static readonly pb::FieldCodec<uint> _repeated_extra_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> extra_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Extra
        {
            get { return extra_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionPrefix);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionPrefix other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Version != other.Version) return false;
            if (UnlockTime != other.UnlockTime) return false;
            if (!inputs_.Equals(other.inputs_)) return false;
            if (!outputs_.Equals(other.outputs_)) return false;
            if (PaymentId != other.PaymentId) return false;
            if (!extra_.Equals(other.extra_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Version != 0) hash ^= Version.GetHashCode();
            if (UnlockTime != 0UL) hash ^= UnlockTime.GetHashCode();
            hash ^= inputs_.GetHashCode();
            hash ^= outputs_.GetHashCode();
            if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
            hash ^= extra_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Version != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Version);
            }
            if (UnlockTime != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(UnlockTime);
            }
            inputs_.WriteTo(output, _repeated_inputs_codec);
            outputs_.WriteTo(output, _repeated_outputs_codec);
            if (PaymentId.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(PaymentId);
            }
            extra_.WriteTo(output, _repeated_extra_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Version != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
            }
            if (UnlockTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnlockTime);
            }
            size += inputs_.CalculateSize(_repeated_inputs_codec);
            size += outputs_.CalculateSize(_repeated_outputs_codec);
            if (PaymentId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
            }
            size += extra_.CalculateSize(_repeated_extra_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionPrefix other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Version != 0)
            {
                Version = other.Version;
            }
            if (other.UnlockTime != 0UL)
            {
                UnlockTime = other.UnlockTime;
            }
            inputs_.Add(other.inputs_);
            outputs_.Add(other.outputs_);
            if (other.PaymentId.Length != 0)
            {
                PaymentId = other.PaymentId;
            }
            extra_.Add(other.extra_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Version = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            UnlockTime = input.ReadUInt64();
                            break;
                        }
                    case 26:
                        {
                            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
                            break;
                        }
                    case 34:
                        {
                            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
                            break;
                        }
                    case 42:
                        {
                            PaymentId = input.ReadString();
                            break;
                        }
                    case 50:
                    case 48:
                        {
                            extra_.AddEntriesFrom(input, _repeated_extra_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionSignature : pb::IMessage<TurtleTransactionSignature>
    {
        private static readonly pb::MessageParser<TurtleTransactionSignature> _parser = new pb::MessageParser<TurtleTransactionSignature>(() => new TurtleTransactionSignature());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionSignature> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionSignature()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionSignature(TurtleTransactionSignature other) : this()
        {
            signature_ = other.signature_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionSignature Clone()
        {
            return new TurtleTransactionSignature(this);
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 1;
        private string signature_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Signature
        {
            get { return signature_; }
            set
            {
                signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionSignature);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionSignature other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Signature != other.Signature) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Signature.Length != 0) hash ^= Signature.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Signature.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Signature);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Signature.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionSignature other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Signature.Length != 0)
            {
                Signature = other.Signature;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Signature = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionInput : pb::IMessage<TurtleTransactionInput>
    {
        private static readonly pb::MessageParser<TurtleTransactionInput> _parser = new pb::MessageParser<TurtleTransactionInput>(() => new TurtleTransactionInput());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionInput> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInput()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInput(TurtleTransactionInput other) : this()
        {
            switch (other.InputCase)
            {
                case InputOneofCase.Gen:
                    Gen = other.Gen.Clone();
                    break;
                case InputOneofCase.Key:
                    Key = other.Key.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInput Clone()
        {
            return new TurtleTransactionInput(this);
        }

        /// <summary>Field number for the "gen" field.</summary>
        public const int GenFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen Gen
        {
            get { return inputCase_ == InputOneofCase.Gen ? (global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen)input_ : null; }
            set
            {
                input_ = value;
                inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Gen;
            }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey Key
        {
            get { return inputCase_ == InputOneofCase.Key ? (global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey)input_ : null; }
            set
            {
                input_ = value;
                inputCase_ = value == null ? InputOneofCase.None : InputOneofCase.Key;
            }
        }

        private object input_;
        /// <summary>Enum of possible cases for the "input" oneof.</summary>
        public enum InputOneofCase
        {
            None = 0,
            Gen = 1,
            Key = 2,
        }
        private InputOneofCase inputCase_ = InputOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InputOneofCase InputCase
        {
            get { return inputCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInput()
        {
            inputCase_ = InputOneofCase.None;
            input_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionInput);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionInput other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Gen, other.Gen)) return false;
            if (!object.Equals(Key, other.Key)) return false;
            if (InputCase != other.InputCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (inputCase_ == InputOneofCase.Gen) hash ^= Gen.GetHashCode();
            if (inputCase_ == InputOneofCase.Key) hash ^= Key.GetHashCode();
            hash ^= (int)inputCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (inputCase_ == InputOneofCase.Gen)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Gen);
            }
            if (inputCase_ == InputOneofCase.Key)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Key);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (inputCase_ == InputOneofCase.Gen)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gen);
            }
            if (inputCase_ == InputOneofCase.Key)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionInput other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.InputCase)
            {
                case InputOneofCase.Gen:
                    if (Gen == null)
                    {
                        Gen = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen();
                    }
                    Gen.MergeFrom(other.Gen);
                    break;
                case InputOneofCase.Key:
                    if (Key == null)
                    {
                        Key = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey();
                    }
                    Key.MergeFrom(other.Key);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen subBuilder = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputGen();
                            if (inputCase_ == InputOneofCase.Gen)
                            {
                                subBuilder.MergeFrom(Gen);
                            }
                            input.ReadMessage(subBuilder);
                            Gen = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey subBuilder = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionInputKey();
                            if (inputCase_ == InputOneofCase.Key)
                            {
                                subBuilder.MergeFrom(Key);
                            }
                            input.ReadMessage(subBuilder);
                            Key = subBuilder;
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionInputGen : pb::IMessage<TurtleTransactionInputGen>
    {
        private static readonly pb::MessageParser<TurtleTransactionInputGen> _parser = new pb::MessageParser<TurtleTransactionInputGen>(() => new TurtleTransactionInputGen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionInputGen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputGen()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputGen(TurtleTransactionInputGen other) : this()
        {
            type_ = other.type_;
            height_ = other.height_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputGen Clone()
        {
            return new TurtleTransactionInputGen(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 2;
        private ulong height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Height
        {
            get { return height_; }
            set
            {
                height_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionInputGen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionInputGen other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Height != other.Height) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Height != 0UL) hash ^= Height.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Type);
            }
            if (Height != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(Height);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
            }
            if (Height != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Height);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionInputGen other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Height != 0UL)
            {
                Height = other.Height;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Height = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionInputKey : pb::IMessage<TurtleTransactionInputKey>
    {
        private static readonly pb::MessageParser<TurtleTransactionInputKey> _parser = new pb::MessageParser<TurtleTransactionInputKey>(() => new TurtleTransactionInputKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionInputKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputKey()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputKey(TurtleTransactionInputKey other) : this()
        {
            type_ = other.type_;
            amount_ = other.amount_;
            offsets_ = other.offsets_.Clone();
            keyImage_ = other.keyImage_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionInputKey Clone()
        {
            return new TurtleTransactionInputKey(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private int type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private ulong amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        /// <summary>Field number for the "offsets" field.</summary>
        public const int OffsetsFieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_offsets_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> offsets_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Offsets
        {
            get { return offsets_; }
        }

        /// <summary>Field number for the "keyImage" field.</summary>
        public const int KeyImageFieldNumber = 4;
        private string keyImage_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string KeyImage
        {
            get { return keyImage_; }
            set
            {
                keyImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionInputKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionInputKey other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Amount != other.Amount) return false;
            if (!offsets_.Equals(other.offsets_)) return false;
            if (KeyImage != other.KeyImage) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Amount != 0UL) hash ^= Amount.GetHashCode();
            hash ^= offsets_.GetHashCode();
            if (KeyImage.Length != 0) hash ^= KeyImage.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Type);
            }
            if (Amount != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(Amount);
            }
            offsets_.WriteTo(output, _repeated_offsets_codec);
            if (KeyImage.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(KeyImage);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
            }
            if (Amount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
            }
            size += offsets_.CalculateSize(_repeated_offsets_codec);
            if (KeyImage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyImage);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionInputKey other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Amount != 0UL)
            {
                Amount = other.Amount;
            }
            offsets_.Add(other.offsets_);
            if (other.KeyImage.Length != 0)
            {
                KeyImage = other.KeyImage;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            Amount = input.ReadUInt64();
                            break;
                        }
                    case 26:
                    case 24:
                        {
                            offsets_.AddEntriesFrom(input, _repeated_offsets_codec);
                            break;
                        }
                    case 34:
                        {
                            KeyImage = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionOutputTarget : pb::IMessage<TurtleTransactionOutputTarget>
    {
        private static readonly pb::MessageParser<TurtleTransactionOutputTarget> _parser = new pb::MessageParser<TurtleTransactionOutputTarget>(() => new TurtleTransactionOutputTarget());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionOutputTarget> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutputTarget()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutputTarget(TurtleTransactionOutputTarget other) : this()
        {
            type_ = other.type_;
            key_ = other.key_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutputTarget Clone()
        {
            return new TurtleTransactionOutputTarget(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private uint type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key
        {
            get { return key_; }
            set
            {
                key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionOutputTarget);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionOutputTarget other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Key != other.Key) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Key.Length != 0) hash ^= Key.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Type);
            }
            if (Key.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Key);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
            }
            if (Key.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionOutputTarget other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Key.Length != 0)
            {
                Key = other.Key;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Type = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Key = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TurtleTransactionOutput : pb::IMessage<TurtleTransactionOutput>
    {
        private static readonly pb::MessageParser<TurtleTransactionOutput> _parser = new pb::MessageParser<TurtleTransactionOutput>(() => new TurtleTransactionOutput());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TurtleTransactionOutput> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::TurtleToTurtle.TurtleCoin.TurtleCoinReflection.Descriptor.MessageTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutput()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutput(TurtleTransactionOutput other) : this()
        {
            amount_ = other.amount_;
            target_ = other.target_ != null ? other.target_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TurtleTransactionOutput Clone()
        {
            return new TurtleTransactionOutput(this);
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 1;
        private ulong amount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 2;
        private global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget target_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget Target
        {
            get { return target_; }
            set
            {
                target_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TurtleTransactionOutput);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TurtleTransactionOutput other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Amount != other.Amount) return false;
            if (!object.Equals(Target, other.Target)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Amount != 0UL) hash ^= Amount.GetHashCode();
            if (target_ != null) hash ^= Target.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Amount != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(Amount);
            }
            if (target_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Target);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Amount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
            }
            if (target_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TurtleTransactionOutput other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Amount != 0UL)
            {
                Amount = other.Amount;
            }
            if (other.target_ != null)
            {
                if (target_ == null)
                {
                    target_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget();
                }
                Target.MergeFrom(other.Target);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Amount = input.ReadUInt64();
                            break;
                        }
                    case 18:
                        {
                            if (target_ == null)
                            {
                                target_ = new global::TurtleToTurtle.TurtleCoin.TurtleTransactionOutputTarget();
                            }
                            input.ReadMessage(target_);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code